{"version":3,"file":"static/js/7778.00763ca5.chunk.js","mappings":"iPAeAA,EAAAA,GAAQC,SACNC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,EACAC,EAAAA,GACAC,EAAAA,GAGK,IAAMC,EAAU,CACrBC,YAAY,EACZC,QAAS,CACPC,OAAQ,CACNC,SAAU,OAEZC,MAAO,CACLC,SAAS,EACTC,KAAM,SAERC,WAAY,CACVC,OAAQ,CACNC,SAAU,cAEZC,YAAa,CACXC,OAAQ,CACNC,KAAM,QACNC,OAAQ,EACRC,OAAQ,KACRC,gBAAiB,2BACjBC,WAAW,YAEbC,OAAQ,CACNL,KAAM,QACNC,OAAQ,EACRC,OAAQ,IACRC,gBAAiB,2BACjBC,WAAW,UAEbE,OAAQ,CACNN,KAAM,QACNC,OAAQ,EACRC,OAAQ,IACRC,gBAAiB,2BACjBC,WAAW,cACXG,OAAO,UAETC,OAAQ,CACNR,KAAM,QACNC,OAAQ,EACRC,OAAQ,KACRC,gBAAiB,2BACjBC,WAAW,YAEbK,OAAQ,CACNT,KAAM,QACNC,OAAQ,GACRC,OAAQ,IACRC,gBAAiB,2BACjBC,WAAW,UAEbM,OAAQ,CACNV,KAAM,QACNC,OAAQ,GACRC,OAAQ,IACRC,gBAAiB,2BACjBC,WAAW,cACXG,OAAO,UAETI,MAAO,CACLX,KAAM,OACNY,KAAM,KACNC,KAAM,KACNC,YAAa,oBACbC,YAAa,GAEfC,MAAO,CACLhB,KAAM,OACNY,KAAM,IACNC,KAAM,IACNC,YAAa,QACbC,YAAa,OASVE,EAAO,CAClBV,OAHa,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAK,KAAM,KAAM,MAAO,MAAO,MAAO,MAAO,MAAO,OAItGW,SAAU,CACR,CACEC,MAAO,YACPF,KAAM,CAAC,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,GAAI,KAAM,KACjFG,MAAM,EACNN,YAAa,MACbO,QAAS,IAEX,CACEF,MAAO,YACPF,KAAM,CAAC,KAAM,IAAK,IAAK,KAAM,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,IAAK,IAAK,IAAK,KAAM,KAClFG,MAAM,EACNN,YAAa,QACbO,QAAS,IAEX,CACEF,MAAO,YACPF,KAAM,CAAC,KAAM,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,KAAM,IAAK,IAAK,KAAM,KAAM,IAAK,GAAI,KAC/EG,MAAM,EACNN,YAAa,OACbO,QAAS,IAEX,CACEF,MAAO,YACPF,KAAM,CAAC,IAAK,IAAK,KAAM,KAAM,IAAK,IAAK,IAAK,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,IAAK,KACjFG,MAAM,EACNN,YAAa,SACbO,QAAS,MAaf,EARoB,WAClB,OAEIC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAACpC,QAASA,EAAS8B,KAAMA,GAGpC,ECpHA,EAjBe,WAGb,OACEK,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAAAC,UACHH,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACC,GAAI,GAAGF,UACXG,EAAAA,EAAAA,MAACC,EAAAA,GAAK,CAACC,UAAU,OAAML,SAAA,EACrBH,EAAAA,EAAAA,KAACS,EAAAA,GAAW,CAAAN,SAAC,gBACbH,EAAAA,EAAAA,KAACU,EAAAA,GAAS,CAAAP,UACRH,EAAAA,EAAAA,KAACW,EAAW,YAMxB,C","sources":["views/charts/CustomChild.js","views/charts/CustomChart.js"],"sourcesContent":["import React from \"react\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n} from \"chart.js\";\nimport { Line } from \"react-chartjs-2\";\n\nimport annotationPlugin from \"chartjs-plugin-annotation\";\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  annotationPlugin\n);  \n\nexport const options = {\n  responsive: true,\n  plugins: {\n    legend: {\n      position: \"top\"\n    },\n    title: {\n      display: true,\n      text: \"Chart\"\n    },\n    annotation: {\n      common: {\n        drawTime: 'beforeDraw'\n      },\n      annotations: {\n        point1: {\n          type: 'point',\n          xValue: 1,\n          yValue: 1060,\n          backgroundColor: 'rgba(255, 99, 132, 0.25)',\n          pointStyle:\"triangle\"\n        },\n        point2: {\n          type: 'point',\n          xValue: 3,\n          yValue: 410,\n          backgroundColor: 'rgba(255, 99, 132, 0.25)',\n          pointStyle:\"circle\"\n        },\n        point3: {\n          type: 'point',\n          xValue: 5,\n          yValue: 860,\n          backgroundColor: 'rgba(255, 99, 132, 0.25)',\n          pointStyle:\"rectRounded\",\n          labels:\"bdfgds\"\n        },\n        point4: {\n          type: 'point',\n          xValue: 9,\n          yValue: 1200,\n          backgroundColor: 'rgba(255, 99, 132, 0.25)',\n          pointStyle:\"triangle\"\n        },\n        point5: {\n          type: 'point',\n          xValue: 11,\n          yValue: 610,\n          backgroundColor: 'rgba(255, 99, 132, 0.25)',\n          pointStyle:\"circle\"\n        },\n        point6: {\n          type: 'point',\n          xValue: 13,\n          yValue: 960,\n          backgroundColor: 'rgba(255, 99, 132, 0.25)',\n          pointStyle:\"rectRounded\",\n          labels:\"bdfgds\"\n        },\n        line1: {\n          type: 'line',\n          yMin: 1100,\n          yMax: 1100,\n          borderColor: 'rgb(255, 99, 132)',\n          borderWidth: 2,\n        },\n        line2: {\n          type: 'line',\n          yMin: 100,\n          yMax: 100,\n          borderColor: 'green',\n          borderWidth: 2,\n        }\n      }\n    }\n  }\n};\n\nconst labels = [\"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\",\"80\", \"90\", \"100\", \"110\", \"120\", \"130\", \"140\", \"150\"];\n\nexport const data = {\n  labels,\n  datasets: [\n    {\n      label: \"Dataset 1\",\n      data: [849, 1273, 632, 113, 1170, 298, 925, 1119, 672, 1377, 527, 315, 63, 1046, 890],\n      fill: false,\n      borderColor: \"red\",\n      tension: 0.1\n    },\n    {\n      label: \"Dataset 2\",\n      data: [1112, 742, 397, 1188, 555, 981, 255, 754, 1224, 1308, 623, 130, 988, 1017, 839],\n      fill: false,\n      borderColor: \"green\",\n      tension: 0.1\n    },\n    {\n      label: \"Dataset 3\",\n      data: [1343, 103, 632, 987, 591, 239, 74, 1126, 319, 684, 1038, 1257, 560, 99, 891],\n      fill: false,\n      borderColor: \"blue\",\n      tension: 0.1\n    },\n    {\n      label: \"Dataset 4\",\n      data: [408, 762, 1199, 1263, 587, 259, 772, 283, 1235, 685, 201, 1080, 911, 576, 376],\n      fill: false,\n      borderColor: \"orange\",\n      tension: 0.1\n    }\n  ]\n};\n\nconst CustomChild = () => {\n  return (\n    \n      <Line options={options} data={data} />\n    \n  );\n}\n\nexport default CustomChild;\n\n\n\n// import React, { useEffect, useRef } from 'react';\n// // import { Line } from 'react-chartjs-2';\n// // import 'chartjs-plugin-annotation';\n// import { Chart } from 'chart.js';\n// import annotationPlugin from 'chartjs-plugin-annotation';\n// Chart.register(annotationPlugin);\n\n// const GraphWithComments = () => {\n//   // Your data and options configuration\n//   const data = {\n//     labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n//     datasets: [\n//       {\n//         label: 'Sales',\n//         data: [30, 25, 45, 20, 55],\n//         backgroundColor: 'rgba(75,192,192,0.2)',\n//         borderColor: 'rgba(75,192,192,1)',\n//         borderWidth: 1,\n//       },\n//     ],\n//   };\n\n//   const options = {\n//     annotation: {\n//       annotations: [\n//         {\n//           type: 'line',\n//           mode: 'vertical',\n//           scaleID: 'x-axis-0',\n//           value: 'Mar', // X-axis value where you want to add the annotation\n//           borderColor: 'red',\n//           borderWidth: 2,\n//           label: {\n//             content: 'Comment 1: Important Event',\n//             enabled: true,\n//             position: 'top',\n//           },\n//         },\n//         {\n//           type: 'line',\n//           mode: 'vertical',\n//           scaleID: 'x-axis-0',\n//           value: 'Apr', // X-axis value where you want to add the annotation\n//           borderColor: 'blue',\n//           borderWidth: 2,\n//           label: {\n//             content: 'Comment 2: Another Event',\n//             enabled: true,\n//             position: 'top',\n//           },\n//         },\n//         // Add more comments or annotations as needed\n//       ],\n//     },\n//   };\n\n//   return (\n//     <div>\n//       <GraphWithAnnotations data={data} options={options} />\n//     </div>\n//   );\n// };\n\n// // import React, { useEffect, useRef } from 'react';\n// // import { Line } from 'react-chartjs-2';\n// // import 'chartjs-plugin-annotation';\n\n// const GraphWithAnnotations = ({ data, options }) => {\n//   const chartRef = useRef(null);\n\n//   useEffect(() => {\n//     if (chartRef.current) {\n//       const chartInstance = chartRef.current.chartInstance;\n\n//       // Check if a chart instance already exists\n//       if (chartInstance) {\n//         // If it does, destroy the existing chart\n//         chartInstance.destroy();\n//       }\n\n//       // Create a new chart on the canvas\n//       const newChart = new Line(chartRef.current, {\n//         type: 'line',\n//         data: data,\n//         options: options,\n//       });\n\n//       // Update the chart ref\n//       chartRef.current = newChart;\n//     }\n//   }, [data, options]);\n\n//   return (\n//     <div>\n//       <canvas ref={chartRef} />\n//     </div>\n//   );\n// };\n\n// // export default GraphWithAnnotations;","import React from 'react'\nimport { CCard, CCardBody, CCol, CCardHeader, CRow } from '@coreui/react'\nimport {\n  CChartBar,\n  CChartDoughnut,\n  CChartLine,\n  CChartPie,\n  CChartPolarArea,\n  CChartRadar,\n} from '@coreui/react-chartjs'\nimport { DocsCallout } from 'src/components'\nimport CustomChild from './CustomChild'\n\nconst Charts = () => {\n  const random = () => Math.round(Math.random() * 100)\n\n  return (\n    <CRow>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>Line Chart</CCardHeader>\n          <CCardBody>\n            <CustomChild />\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default Charts\n"],"names":["ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","annotationPlugin","options","responsive","plugins","legend","position","title","display","text","annotation","common","drawTime","annotations","point1","type","xValue","yValue","backgroundColor","pointStyle","point2","point3","labels","point4","point5","point6","line1","yMin","yMax","borderColor","borderWidth","line2","data","datasets","label","fill","tension","_jsx","Line","CRow","children","CCol","xs","_jsxs","CCard","className","CCardHeader","CCardBody","CustomChild"],"sourceRoot":""}